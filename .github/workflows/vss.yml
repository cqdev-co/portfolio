name: Market Hours Volatility Squeeze Scanner

on:
  schedule:
    # Run every 30 minutes during US market hours (9:30 AM - 4:00 PM EST)
    # EST = UTC-5, EDT = UTC-4 (market hours: 14:30-21:00 UTC in EST, 13:30-20:00 UTC in EDT)
    # Using EST times (UTC-5) for consistency: 14:30-21:00 UTC
    - cron: '30,0 14,15,16,17,18,19,20 * * 1-5'  # Every 30 min during market hours, Mon-Fri
  workflow_dispatch:  # Allow manual triggering
    inputs:
      min_score:
        description: 'Minimum signal score threshold'
        required: false
        default: '0.7'
        type: string
      max_symbols:
        description: 'Maximum symbols to scan (leave empty for all)'
        required: false
        default: ''
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  scan-signals:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Shorter timeout for frequent runs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: volatility-squeeze-scanner/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          
    - name: Install dependencies
      working-directory: volatility-squeeze-scanner
      run: |
        # Force update to specific Typer version
        poetry add typer@0.9.4 --group=main
        poetry install --only=main
        
    - name: Validate market hours
      run: |
        # Check if we're within market hours (allowing some buffer)
        CURRENT_HOUR=$(date -u +%H)
        CURRENT_MINUTE=$(date -u +%M)
        CURRENT_DAY=$(date -u +%u)  # 1=Monday, 7=Sunday
        
        echo "Current UTC time: $(date -u)"
        echo "Current hour: $CURRENT_HOUR, minute: $CURRENT_MINUTE, day: $CURRENT_DAY"
        
        # Market hours: 14:30-21:00 UTC (9:30 AM - 4:00 PM EST)
        # Allow weekend manual runs for testing
        if [ "$CURRENT_DAY" -le 5 ]; then  # Monday-Friday
          if [ "$CURRENT_HOUR" -lt 14 ] || [ "$CURRENT_HOUR" -gt 20 ]; then
            echo "⚠️  Outside standard market hours, but proceeding with scan"
          elif [ "$CURRENT_HOUR" -eq 14 ] && [ "$CURRENT_MINUTE" -lt 30 ]; then
            echo "⚠️  Before market open (9:30 AM EST), but proceeding with scan"
          else
            echo "✅ Within market hours - proceeding with scan"
          fi
        else
          echo "📅 Weekend detected - manual run or testing"
        fi
        
    - name: Run Volatility Squeeze Scanner
      env:
        # Frontend environment variables
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY }}
        # Backend environment variables (for ticker service)
        SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY }}
      working-directory: volatility-squeeze-scanner
      run: |
        # Set scan parameters (lower threshold for frequent runs)
        MIN_SCORE="${{ github.event.inputs.min_score || '0.6' }}"
        MAX_SYMBOLS="${{ github.event.inputs.max_symbols }}"
        
        # Build command with optional parameters
        SCAN_CMD="poetry run python -m volatility_scanner.cli scan-all --min-score $MIN_SCORE --fast"
        
        if [ ! -z "$MAX_SYMBOLS" ]; then
          SCAN_CMD="$SCAN_CMD --max-symbols $MAX_SYMBOLS"
        fi
        
        echo "🚀 Running: $SCAN_CMD"
        
        # First, test if the CLI is accessible
        echo "🔍 Testing CLI accessibility..."
        poetry run python -m volatility_scanner.cli --help > cli_test.log 2>&1 || {
          echo "❌ CLI not accessible, showing error:"
          cat cli_test.log
          exit 1
        }
        echo "✅ CLI is accessible"
        
        # Test version and system status
        echo "🔍 Testing system status..."
        poetry run python -m volatility_scanner.cli version > version_test.log 2>&1 || {
          echo "❌ Version command failed, showing error:"
          cat version_test.log
          exit 1
        }
        echo "✅ System status check passed"
        cat version_test.log
        
        # Run the scanner and capture output
        echo "🚀 Starting volatility scan..."
        $SCAN_CMD > scan_output.log 2>&1
        SCAN_EXIT_CODE=$?
        
        # Show the results regardless of exit code
        echo "📊 Scan Results (Exit Code: $SCAN_EXIT_CODE):"
        echo "--- Last 30 lines of output ---"
        tail -30 scan_output.log
        
        # If scan failed, show more context
        if [ $SCAN_EXIT_CODE -ne 0 ]; then
          echo ""
          echo "❌ Scan failed with exit code $SCAN_EXIT_CODE"
          echo "--- Full error output ---"
          cat scan_output.log
          exit $SCAN_EXIT_CODE
        fi
        
    - name: Upload scan logs
      if: always()  # Upload logs even if scan fails
      uses: actions/upload-artifact@v4
      with:
        name: scan-logs-${{ github.run_number }}
        path: volatility-squeeze-scanner/scan_output.log
        retention-days: 30
        
    - name: Check scan success
      working-directory: volatility-squeeze-scanner
      run: |
        # Check if scan completed successfully
        if grep -q "📊 Full Market Scan Summary:" scan_output.log; then
          echo "✅ Scan completed successfully"
          
          # Extract key metrics
          SYMBOLS_SCANNED=$(grep "📊 Symbols scanned:" scan_output.log | grep -o '[0-9]\+' | head -1 || echo "0")
          SIGNALS_FOUND=$(grep "🎯 High-quality signals found:" scan_output.log | grep -o '[0-9]\+' | head -1 || echo "0")
          SUCCESS_RATE=$(grep "🔄 Data retrieval success:" scan_output.log | grep -o '[0-9]\+\.[0-9]\+%' | head -1 || echo "0%")
          
          echo "📈 Symbols Scanned: $SYMBOLS_SCANNED"
          echo "🎯 Signals Found: $SIGNALS_FOUND"
          echo "✅ Success Rate: $SUCCESS_RATE"
          
          # Set outputs for potential notifications
          echo "symbols_scanned=$SYMBOLS_SCANNED" >> $GITHUB_OUTPUT
          echo "signals_found=$SIGNALS_FOUND" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
        else
          echo "❌ Scan failed or incomplete"
          echo "Last 50 lines of output:"
          tail -50 scan_output.log
          exit 1
        fi
        
    - name: Notify on significant signals (optional)
      if: success()
      run: |
        SIGNALS_FOUND="${{ steps.check-scan-success.outputs.signals_found || '0' }}"
        CURRENT_TIME=$(date -u '+%H:%M UTC')
        
        if [ "$SIGNALS_FOUND" -gt 20 ]; then
          echo "🚨 Very high signal count detected: $SIGNALS_FOUND signals found at $CURRENT_TIME!"
          echo "Market may be experiencing unusual volatility - review immediately."
        elif [ "$SIGNALS_FOUND" -gt 10 ]; then
          echo "⚡ High signal count detected: $SIGNALS_FOUND signals found at $CURRENT_TIME"
          echo "Above average market activity detected."
        elif [ "$SIGNALS_FOUND" -gt 0 ]; then
          echo "📊 Found $SIGNALS_FOUND signals at $CURRENT_TIME - normal activity"
        else
          echo "📉 No signals found at $CURRENT_TIME - quiet market or high threshold"
        fi

  # Optional: Add a job to create summary issue or send notifications
  create-summary:
    needs: scan-signals
    runs-on: ubuntu-latest
    if: always()  # Run even if scan fails
    
    steps:
    - name: Create run summary
      run: |
        echo "## 📊 Market Hours Volatility Squeeze Scanner Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.scan-signals.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Schedule:** Every 30 minutes during market hours (9:30 AM - 4:00 PM EST)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.scan-signals.result }}" = "success" ]; then
          echo "✅ **Scan completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Symbols Scanned:** ${{ needs.scan-signals.outputs.symbols_scanned || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Signals Found:** ${{ needs.scan-signals.outputs.signals_found || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate:** ${{ needs.scan-signals.outputs.success_rate || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Scan failed or was cancelled**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs for detailed error information." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Signals are stored in Supabase database for real-time analysis and visualization.*" >> $GITHUB_STEP_SUMMARY
        echo "*Next scan scheduled in 30 minutes (if within market hours).*" >> $GITHUB_STEP_SUMMARY
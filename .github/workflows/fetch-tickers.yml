name: Fetch Global Market Tickers

on:
  schedule:
    # Run daily at 6 AM UTC (after markets close)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no database writes)'
        required: false
        default: false
        type: boolean
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean
      disable_quality_filtering:
        description: 'Disable quality filtering (fetch all tickers)'
        required: false
        default: false
        type: boolean
      quality_filter_config:
        description: 'Quality filtering level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - conservative
          - moderate
          - liberal
      max_quality_tickers:
        description: 'Maximum number of quality tickers to keep'
        required: false
        type: number

permissions:
  issues: write
  contents: read

jobs:
  fetch-tickers:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env
        echo "NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY }}" >> .env
        echo "ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}" >> .env
        echo "FMP_API_KEY=${{ secrets.FMP_API_KEY }}" >> .env
        
    - name: Run ticker fetch (dry-run)
      if: github.event.inputs.dry_run == 'true'
      run: |
        cd .github/scripts
        python fetch_tickers.py --dry-run \
          ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }} \
          ${{ github.event.inputs.disable_quality_filtering == 'true' && '--disable-quality-filtering' || '' }} \
          ${{ github.event.inputs.quality_filter_config && format('--quality-filter-config {0}', github.event.inputs.quality_filter_config) || '' }} \
          ${{ github.event.inputs.max_quality_tickers && format('--max-quality-tickers {0}', github.event.inputs.max_quality_tickers) || '' }}
        
    - name: Run ticker fetch (production)
      if: github.event.inputs.dry_run != 'true'
      run: |
        cd .github/scripts
        python fetch_tickers.py \
          ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }} \
          ${{ github.event.inputs.disable_quality_filtering == 'true' && '--disable-quality-filtering' || '' }} \
          ${{ github.event.inputs.quality_filter_config && format('--quality-filter-config {0}', github.event.inputs.quality_filter_config) || '' }} \
          ${{ github.event.inputs.max_quality_tickers && format('--max-quality-tickers {0}', github.event.inputs.max_quality_tickers) || '' }}
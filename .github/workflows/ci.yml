name: CI/CD Pipeline

# Workflow temporarily disabled until Vercel project is set up
# Uncomment the following section after setting up Vercel integration
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Add caching for Bun dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install

      - name: Lint
        working-directory: ./frontend
        run: bun run lint

      - name: Test
        working-directory: ./frontend
        run: bun run test
        
      - name: Build
        working-directory: ./frontend
        run: bun run build 

  security:
    runs-on: ubuntu-latest
    needs: build-and-test  # Run after build completes
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build application
        working-directory: ./frontend
        run: bun run build

      - name: Install Nuclei
        run: |
          # Use the official installation method with error handling
          curl -s https://api.github.com/repos/projectdiscovery/nuclei/releases/latest \
            | grep "browser_download_url.*linux_amd64.zip" \
            | cut -d '"' -f 4 \
            | wget -qi -
          
          # Extract and install
          unzip -o -q nuclei_*_linux_amd64.zip
          sudo mv nuclei /usr/local/bin/
          sudo chmod +x /usr/local/bin/nuclei
          
          # Verify installation
          nuclei -version
          
          # Update Nuclei templates
          nuclei -update-templates

      - name: Start application for scanning
        working-directory: ./frontend
        run: |
          # Start the development server locally for security scanning
          bun run dev &
          echo "APPLICATION_PID=$!" >> $GITHUB_ENV
          
          # Wait for application to start
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting for application... (attempt $i/30)"
            sleep 2
          done
          
          # Final check
          curl -f http://localhost:3000 || (echo "Application failed to start" && exit 1)

      - name: Run Nuclei security scan
        run: |
          TARGET_URL="http://localhost:3000"
          echo "Running Nuclei scan against: $TARGET_URL"
          
          # Run Nuclei scan with commonly used templates
          nuclei -target "$TARGET_URL" \
            -tags cve,exposure,misconfig,vulnerability \
            -severity low,medium,high,critical \
            -json -output nuclei-results.json \
            -stats || true
          
          # Also run with a more focused web app template set
          nuclei -target "$TARGET_URL" \
            -tags tech,default-logins,web \
            -json -output nuclei-web-results.json \
            -stats || true

      - name: Process Nuclei results
        if: always()
        run: |
          if [ -f nuclei-results.json ]; then
            echo "=== Nuclei Security Scan Results ==="
            cat nuclei-results.json | jq -r '.info.severity + " - " + .info.name + " - " + .matched_at' || cat nuclei-results.json
            
            # Count findings by severity
            if [ -s nuclei-results.json ]; then
              echo "=== Summary ==="
              echo "Critical: $(jq -r 'select(.info.severity=="critical")' nuclei-results.json | wc -l)"
              echo "High: $(jq -r 'select(.info.severity=="high")' nuclei-results.json | wc -l)"
              echo "Medium: $(jq -r 'select(.info.severity=="medium")' nuclei-results.json | wc -l)"
              echo "Low: $(jq -r 'select(.info.severity=="low")' nuclei-results.json | wc -l)"
            else
              echo "No security issues found!"
            fi
          fi
          
          if [ -f nuclei-web-results.json ]; then
            echo "=== Web-specific scan results ==="
            cat nuclei-web-results.json | jq -r '.info.severity + " - " + .info.name + " - " + .matched_at' || cat nuclei-web-results.json
          fi

      - name: Upload Nuclei results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-security-scan-results
          path: |
            nuclei-results.json
            nuclei-web-results.json
          retention-days: 30

      - name: Stop application
        if: always()
        run: |
          if [ ! -z "$APPLICATION_PID" ]; then
            kill $APPLICATION_PID || true
          fi